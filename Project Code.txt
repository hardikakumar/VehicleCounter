#include <msp430.h>
#include <inttypes.h>
#include <stdio.h>

#define CMD         0
#define DATA        1

#define AIN         BIT0

#define LCD_OUT     P1OUT
#define LCD_DIR     P1DIR
#define D4          BIT4
#define D5          BIT5
#define D6          BIT6
#define D7          BIT7
#define RS          BIT2
#define EN          BIT3

#define LED         BIT3    //Port 2

void delay(uint16_t t)
{
    uint16_t i;
    for(i=t; i > 0; i--)
        __delay_cycles(100);
}


void pulseEN(void)
{
    LCD_OUT |= EN;
    delay(1);
    LCD_OUT &= ~EN;
    delay(1);
}


void lcd_write(uint8_t value, uint8_t mode)
{
    if(mode == CMD)
        LCD_OUT &= ~RS;
    else
        LCD_OUT |= RS;

    LCD_OUT = ((LCD_OUT & 0x0F) | (value & 0xF0));
    pulseEN();
    delay(1);

    LCD_OUT = ((LCD_OUT & 0x0F) | ((value << 4) & 0xF0));
    pulseEN();
    delay(1);
}


void lcd_print(char *s)
{
    while(*s)
    {
        lcd_write(*s, DATA);
        s++;
    }
}


void lcd_setCursor(uint8_t row, uint8_t col)
{
    const uint8_t row_offsets[] = { 0x00, 0x40};
    lcd_write(0x80 | (col + row_offsets[row]), CMD);
    delay(1);
}


void lcd_printNumber(unsigned int num)
{
    char buf[3];                        // Creating a array of size 3
    char *str = &buf[2];                // Initializing pointer to end of the array

    *str = '\0';                        // storing null pointer at end of string

    do
    {
        unsigned long m = num;          // Storing number in variable m
        num /= 10;                      // Dividing number by 10
        char c = (m - 10 * num) + '0';  // Finding least place value and adding it to get character value of digit
        *--str = c;                     // Decrementing pointer value and storing character at that character
    } while(num);

    lcd_print(str);
}


void lcd_init()
{
    LCD_DIR |= (D4+D5+D6+D7+RS+EN);
    LCD_OUT &= ~(D4+D5+D6+D7+RS+EN);

    delay(150);
    lcd_write(0x33, CMD);
    delay(50);
    lcd_write(0x32, CMD);
    delay(1);


    lcd_write(0x28, CMD);
    delay(1);

    lcd_write(0x0C, CMD);
    delay(1);

    lcd_write(0x01, CMD);
    delay(20);

    lcd_write(0x06, CMD);
    delay(1);

    lcd_setCursor(0,0);
}


void register_settings_for_ADC10()
{
    ADC10AE0 |= AIN;
    ADC10CTL1 = INCH_0;
    ADC10CTL0 = SREF_0 + ADC10SHT_3 + ADC10ON;
}

/* USER DEFINED FUNCTIONS AND GLOBAL VARIABLE
   (defined by Hardika Kumar and Isha Gupta)
        |
        |
        |
        V
*/
int sec_counter=0;
int min_counter=0;
int count=0, flag=0;
int record_min[4], record_sec[4];

void reset_display(void) {
    lcd_setCursor(0,3);
    lcd_print("Stopwatch");

    lcd_setCursor(1,5);
    lcd_print("00:00");
}

void stopwatch(void) {
    flag=1;
    if (sec_counter<10)
        lcd_setCursor(1,9);
    else
        lcd_setCursor(1,8);

    lcd_printNumber(sec_counter++);
    delay(10000);

    if (sec_counter==60)
    {
        lcd_setCursor(1,8);
        lcd_print("00");
        sec_counter=0;
        if (min_counter<9)
            lcd_setCursor(1,6);
        else
            lcd_setCursor(1,5);

        lcd_printNumber(++min_counter);
    }
}

void record_time(void) {
    record_min[count]=min_counter;
    record_sec[count++]=sec_counter;

    sec_counter=0;
    min_counter=0;

    flag=0;
}

//-----------main starting----------
void main(void)
{
    WDTCTL = WDTPW + WDTHOLD;

    lcd_init();

    register_settings_for_ADC10();

    reset_display();
    P2DIR |= BIT3;
    P2OUT &= ~BIT3;

    while(1)
    {
        ADC10CTL0 |= ENC + ADC10SC;

        while(ADC10CTL1 & ADC10BUSY);
        float adc_value = 0;
        adc_value = (ADC10MEM) * (99.00) / (1023.00);

        if(adc_value>15.0 && flag==1)
        {
            P2OUT &= ~BIT3;
            record_time();
            reset_display();
        }

        else if(adc_value>15.0 && flag==0) {
            P2OUT &= ~BIT3;
            reset_display();
        }

        else if(adc_value<=15.0)
        {
            P2OUT |= BIT3;
            stopwatch();
        }

        if(count==4)
            break;

    }

    while(1)
    {
        int i;
        for(i=0; i<4; i+=2) {
            lcd_setCursor(0,0);
            lcd_print("                ");
            lcd_setCursor(1,0);
            lcd_print("                ");

            lcd_setCursor(0,1);
            lcd_print("Car-");
            lcd_printNumber(i+1);
            lcd_setCursor(1,1);
            lcd_printNumber(record_min[i]);
            lcd_print(":");
            if(record_sec[i]-1<10) lcd_print("0");
            lcd_printNumber(record_sec[i]-1);

            lcd_setCursor(0,9);
            lcd_print("Car-");
            lcd_printNumber(i+2);
            lcd_setCursor(1,9);
            lcd_printNumber(record_min[i+1]);
            lcd_print(":");
            if(record_sec[i+1]-1<10) lcd_print("0");
            lcd_printNumber(record_sec[i+1]-1);
            delay(25000);
        }
    }
}
